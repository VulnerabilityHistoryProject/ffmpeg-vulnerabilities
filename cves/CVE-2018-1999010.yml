CVE: CVE-2018-1999010
CWE: 125
CWE_instructions: |
    Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
    entry that describes your vulnerability. We recommend going to
    https://cwe.mitre.org/data/definitions/699.html for the Software Development
    view of the vulnerabilities. We also recommend the tool
    http://www.cwevis.org/viz to help see how the classifications work.
    
    If you have anything to note about why you classified it this way, write
    something in CWE_note. This field is optional.
    
    Just the number here is fine. No need for name or CWE prefix. If more than one
    apply here, then choose the best one and mention the others in CWE_note.
CWE_note: ~
announced_date: 2019-01-07
announced_instructions: |
    Was there a date that this vulnerability was announced to the world? You can
    find this in changelogs, blogs, bug reports, or perhaps the CVE date.
    
    A good source of this for FFmpeg are their version numbers traced to tags:
    
      https://ffmpeg.org/security.html
      https://github.com/FFmpeg/FFmpeg/releases
    
    
    Please enter your date in YYYY-MM-DD format.
autodiscoverable: 
  answer: true
  answer_note: |
      Sometimes vulnerabilities have specific patterns: the presence of a length
      field in the header means a buffer overflow may be present.
      I believe it could have been found but there was some human element used to find it.
      Whether it was a priority list of subsu
  instructions: |
      Is it plausible that a fully automated tool could have discovered
      this? These are tools that require little knowledge of the domain,
       e.g. automatic static analysis, compiler warnings, fuzzers.
      
      Examples for true answers: SQL injection, XSS, buffer overflow,
      use-after-free
      
      Examples for false: specification violations, permissions issues, anything
      that would require a tool to be "aware" of the project's
      domain-specific requirements.
      
      The answer field should be boolean. In answer_note, please explain
      why you come to that conclusion.
bounty: 
  amt: ~
  announced: ~
  url: ~
bounty_instructions: |
    If you came across any indications that a bounty was paid out for this
    vulnerability, fill it out here. Or correct it if the information already here
    was wrong. Otherwise, leave it blank.
bugs: []
bugs_instructions: |
    Are there any bug reports that trace to this vulnerability?
    
    Sometimes a commit message will mention a bug, or the security page on FFmpeg.
    Sometimes you need to search bug database, which is here:
        https://trac.ffmpeg.org
curated_instructions: |
    If you are manually editing this file, then you are "curating" it.
    This will enable additional integrity checks on this file to make sure you
    fill everything out properly.
    
    IMPORTANT: If you are a student, we cannot accept your work as finished unless
    curation_level is properly set.
    
    The latest curation level is 1.0.
    If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
description: |
    This CVE affects the code that is supposed to be off limits! Naughty naughty!
    Essentially, the length of t for the audio visual format is sent over the network
    and was initially trusted completely by the user. This CVE adds a check to make sure
    there is still data in the stream.
description_instructions: |
    You can get an initial description from the CVE entry on cve.mitre.org. These
    descriptions are a fine start, but they can be kind of jargony.
    
    Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
    read to anyone with some programming experience. We can always pull up the NVD
    description later to get more technical.
    
    Try to still be specific in your description, but remove project-specific
    stuff. Remove references to versions, specific filenames, and other jargon
    that outsiders to this project would not understand. Technology like "regular
    expressions" is fine, and security phrases like "invalid write" are fine to
    keep too.
    
    Your target audience is people just like you before you took any course in
    security
discovered: 
  answer: |
      Paul Cher (who found the bug) is a developer who has solved vulnerabilities
      for FFMPeg in the past,
      according to https://www.openwall.com/lists/oss-security/2017/01/31/12
      this is likely not his first rodeo.
  automated: nil
  contest: nil
  developer: true
  question: |
      How was this vulnerability discovered?
      
      Find any relevant bug reports or mailing list conversations read the
      conversation to find out how this was
      originally found. Answer in longform below in "answer".
      
      If it's clear that the vulenrability was discovered by a
      contest, fill in the name of the contest in "answer".
      
      If it's clear that it was found by a developer of the project itself,
      e.g. from the email address or a previous committer.
      
      The automated, contest, and developer flags can be true, false, or nil.
      
      If there is no evidence as to how this vulnerability was found, then please
      explain where you looked. Thus, 'answer' should always have some
      explanation.
fixes: 
  - 
    commit: cced03dd667a5df6df8fd40d8de0bff477ee02e8
    note: "Github fix (There is a comment confirming code fix)"
fixes_vcc_instructions: |
    Please put the commit hash in "commit" field below (see my example in
    CVE-2011-3092.yml).
    
    Fixes and VCCs follow the same format - they are arrays of hashes.
    
    The notes field is optional - place anything that clarifies things or you
    find interesting in there.
i18n: 
  answer: false
  note: |
      Because the feature was in a substem made to deal with audio and visual formatting,
      I feel like it wouldn't be affected by changes in the language.
  question: |
      Was the feature impacted by this vulnerability about internationalization
      (i18n)? An internationalization feature is one that enables people from all
      over the world to use the system. This includes translations, locales,
      typography, unicode, or various other features.
      
      Answer should be boolean. Write a note about how you came to the conclusions
      you did.
interesting_commits: 
  commits: 
    - 
      commit: ~
      note: "This commit is interesting because it mentions the CVE in the github comments"
    - 
      commit: ~
      note: ~
  question: |
      Optional: are there any interesting commits between your VCC(s) and fix(es)?
      
      Write a brief (under 100 words) description of why you think this commit was
      interesting in light of the lessons learned from this vulnerability. Any
      emerging themes?
      
      This is a catch-all for any interesting commit you find.
      Example of interesting commits:
        * Giant refactors
        * Changing an API or big dependency
        * A change that looks really sketchy
        * Commits where a developer mentions security in their message or comments
ipc: 
  answer: true
  note: |
      This feature gets packets from a process unspecified. It is using streams
      (a type of pipe) to recieve data from an unspecified source
  question: |
      Did the feature that this vulnerability affected use inter-process
      communication? IPC includes OS signals, pipes, stdin/stdout, message
      passing, and clipboard. Writing to files that another program in this
      software system reads is another form of IPC.
      
      Answer should be boolean.
lessons: 
  complex_inputs: 
    applies: ~
    note: ~
  defense_in_depth: 
    applies: ~
    note: ~
  distrust_input: 
    applies: true
    note: "It would be a good idea to verify any user-defined lengths"
  environment_variables: 
    applies: ~
    note: ~
  frameworks_are_optional: 
    applies: ~
    note: ~
  least_privilege: 
    applies: ~
    note: ~
  native_wrappers: 
    applies: ~
    note: ~
  question: |
      Are there any common lessons we have learned from class that apply to this
      vulnerability? In other words, could this vulnerability serve as an example
      of one of those lessons?
      
      Leave "applies" blank or put false if you did not see that lesson (you do
      not need to put a reason). Put "true" if you feel the lesson applies and put
      a quick explanation of how it applies.
      
      Don't feel the need to claim that ALL of these apply, but it's pretty likely
      that one or two of them apply.
      
      If you think of another lesson we covered in class that applies here, feel
      free to give it a small name and add one in the same format as these.
  secure_by_default: 
    applies: ~
    note: ~
  security_by_obscurity: 
    applies: true
    note: "You could calculate the length and not rely on user input at all"
  serial_killer: 
    applies: ~
    note: ~
  yagni: 
    applies: ~
    note: ~
lifetime: 
  answer: |
      August 11, 2010 - Jul 6, 2018 according to the file history.
      The original file hasn't changed much over the years, which could mean
      the bug was hiding until they more access was given. The bug itself was found
      by one developer
  question: |
      We consider the "lifetime" of this vulnerability to be from the earliest
      VCC to the latest fix.
      
      How would you characterize the development of this vulnerable code during
      its lifetime? Many new features? Neglected? One developer?
      Massive refactoring? Changing big dependencies?
      Changing architectures or language?
      
      
      What about the time period for the project itself?
      Did it undergo big changes during this time?
      
      Look at:
        * the commit messages between the two, using a command like
            git log --stat abc..def -- your/file.c
            (where a)
        * the changelog between the two
mistakes: 
  answer: |
      The vulnerability first came to light in the early versions of the product (Around version .3)
      so it may have come from design mistakes. There is also a lot of variable manipulation
      and not many comments, so there may be some confusion in how code is interpreted
  question: |
      In your opinion, after all of this research, what mistakes were made that
      led to this vulnerability? Design mistakes? Maintainability? Requirements?
      Miscommunications? Lack of testing? Lack of understanding? Lack of
      specifications? Working alone?
      
      An answer like "it was just a coding mistake" is not thoughtful enough.
      If it's such an easy mistake to make, how was it missed?
      
      Also, look at the CWE entry for this vulnerability and examine the mitigations
      they have written there. Are they doing those? Does the fix look proper?
      
      Use those questions to inspire your answer. Don't feel obligated to answer
      every one. Write a thoughtful entry here that those ing the software
      engineering industry would find interesting.
nickname: "Chunking of burning data"
nickname_instructions: |
    A catchy name for this vulnerability that would draw attention it. If the
    report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!
    
    Must be under 30 characters. Optional. Be appropriate.
published_date: 2018-07-23
published_instructions: |
    Is there a published fix or patch date for this vulnerability?
    Please enter your date in YYYY-MM-DD format.
reported_date: 2018-07-06
reported_instructions: |
    What date was the vulnerability reported to the security team? Look at the
    security bulletins, bug reports, commit messages of the fix.
    
    Reported date is likely the same as announced and published. Leave blank if
    you can't find it out.
    
    Please enter your date in YYYY-MM-DD format.
specification: 
  answer: true
  answer_note: "The CPE configuration for FFMPEG and Debian Linux are both affected\n"
  instructions: |
      Is there mention of a violation of a specification? For example,
      an RFC specification, a protocol specification, codec spec, or a requirements
      specification.
      
      Be sure to check all artifacts for this: bug report, security
      advisory, commit message, etc.
      
      The answer field should be boolean. In answer_note, please explain
      why you come to that conclusion.
subsystem: 
  answer: "I got this answer by looking at the directory name and comparing it to the list above"
  name: avformat
  question: |
      What subsystems was the mistake in?
      
      Look at the path of the source code files code that were fixed to get
      directory names. Look at comments in the code. Look at the bug reports how
      the bug report was tagged.
      
      In FFmpeg, the Component field is useful here. Often people will say
        "undetermined" - do more homework than them and make a judgement call if
        you can.
      
      Note: a filepath is NOT a subsystem - that's too granular.
      
      A non-exhaustive examples for ffmpeg are:
        * avcodec
        * avdevice
        * avfilter
        * avformat
        * avutil
        * build system
        * documentation
        * fate
        * ffplay
        * ffprobe
        * postproc
        * swresample
        * swscale
        * tools
        * trac
        * website
      
      If this involves fixing multiple subsystems, you can make this an array.
      
      In 'answer', explain how you arrived at this determination.
unit_tested: 
  code: false
  code_answer: false
  fix: false
  fix_answer: false
  question: |
      Were automated unit tests involved in this vulnerability?
      Was the original code unit tested, or not unit tested? Did the fix involve
      improving the automated tests?
      
      For code: and fix: - your answer should be boolean.
      
      For the code_answer below, look not only at the fix but the surrounding
      code near the fix in related directories and determine if and was there were
      unit tests involved for this subsystem. The code
      
      For the fix_answer below, check if the fix for the vulnerability involves
      adding or improving an automated test to ensure this doesn't happen again.
      
      In FFmpeg, they have the FATE suite of regression tests. They are not
      "unit" tests per se, but are automated regression tests. If the fix for the
      vulnerability involved adding or updating a FATE suite, then make fix: true.
upvotes: ~
upvotes_instructions: |
    For the first round, ignore this upvotes number.
    
    For the second round of reviewing, you will be giving a certain amount of
    upvotes to each vulnerability you see. Your peers will tell you how
    interesting they think this vulnerability is, and you'll add that to the
    upvotes score on your branch.
vccs: ~