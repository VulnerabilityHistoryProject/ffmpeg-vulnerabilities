CVE: CVE-2008-4610
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2008-10-07
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.
announced_date: 2008-10-20
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  This vulnerability was caused by FFMpeg attempting to open maliciously-crafted
  .Ogg & .ACC files (both of which are multimedia files that the program can 
  normally open). The former file was able to simply crash the program by having
  it attempt to read "corrupted data," whereas the latter problem occured when 
  FFMpeg attempted to play the potentially corrupted file in one of its sub-programs.
  This works due to the program not thoroughly checking the inputs sent by the user,
  causing the program to attempt to read and parse data that is not designed for the
  program via a null pointer.

  (https://github.com/adf2007/https-git.launchpad.net-ubuntu-cve-tracker/blob/
  2092ddc9b6654290dc9ed321db12df18181fbbb9/retired/CVE-2008-4610)
  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=509616
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 00bbe27631ddce543e00d5fbdee445c39fc84d7f
  note: ''
- commit: ''
  note: ''
vccs:
- commit: e278056fbad7405fc47901faea7de98db003a0fa
  note: Identified by archeogit,
- commit: d86053a41689e8a5ed897ef071c62ef3fcdc3655
  note: Identified by SZZUnleashed
- commit: 67335dbce3a905551d43b9eeb49c737278f927c6
  note: Identified by SZZUnleashed
- commit: b78e7197a81e193827cf2408fe25bc1f14843a72
  note: Identified by SZZUnleashed
- commit: 0ad72bdd5cb493df78c660b9859a8b890018926a
  note: Changed static functions to have the data structs change functionality.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    The bugs lasted for about a month in terms of their longetivity. This was an
    amalgomation of multiple issues. The first issue was found relatively fast by the
    dev team; one table's error check apparently solved this issue. However, the second 
    issue was not solved for multiple weeks until Debian released a patch of their own;
    the patch was released during 2008 (which means it would still fall under the timeline
    of a few months), however the patch pages for this specific release are no longer available.

    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=509616
    (http://patch-tracking.debian.net/patch/series/view/ffmpeg-debian/0.svn20080206-17/
    050_CVE-2008-4610.patch)
    https://www.openwall.com/lists/oss-security/2008/10/07/1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: I did not see unit tests in the nearby directories.
  fix: false
  fix_answer: |
    The fix did not involve an update to FATE or any of the test suites.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    The bug was found on someone's personal blog. The link is no longer active,
    but the developers reference his post in their e-mails to each other.

    https://www.openwall.com/lists/oss-security/2008/10/07/1
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    This vulnerability was only discoverable when crafting specific media
    files to pass into the program specifically to fluster it and cause a 
    denial of service.
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    No specification document is mentioned in the commits nor any exchanges
    between the devs.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: libfaad2
  name: |
    The specific subsystem is identified multiple times by developers in email
    chains to each other. 
    (https://github.com/adf2007/https-git.launchpad.net-ubuntu-cve-tracker/blob/
    2092ddc9b6654290dc9ed321db12df18181fbbb9/retired/CVE-2008-4610)
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: 892fc83e88a20f9543c6c5be3626712be7a2e6f2
    note: |
      This commit displayed a great deal of work surrounding the issues within the decoding
      process inside of the libavcodec library. Mathematical pivots within the tables can 
      easily contain human error. The superblocks also contained various instances of hard-coding
      arbitrary positions within the blocks. Along with that, function documentation was also changed
      which could raise eyebrows considering that this was not available from the start. Was something
      changed?
    
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false 
  note: This is not an i18n problem. This is a data parsing issue.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    The files that cause the crash might theoretically be passed by another
    program. However, in the cases that the original developers found the issue,
    they had to manually pass the file to the program.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      Files sent in by the user cannot be trusted. As shown in the error reports,
      a malicious user may very well send in data that intends on crashing or 
      breaking the system. These specifically crafted media files can cause null
      pointers in the application's inner tables.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: true
    note: |
      Part of the issue regarding the reading of files has to do with the packing and 
      unpacking of object tables & structs in the 892fc83e88a commit.
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: true
    note: Media files can be incredibly complex to fully test and access.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Personally, I believe that the main issue was a lack of testing over a wide
    variety of potential file inputs. By not thoroughly checking that each piece 
    of data extracted from the file is valid, they open the software up to very
    niche cases of being broken. Checking just that the file is not null & that 
    the primary contents are not null is simply not enough to assure the validity
    and safety of a file.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 476
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname: Finnicky Files
